version: "3.7"
services:
  mysql-container:
    container_name: mysql-container
    image: mysql:8.2.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Abc123456789@
      MYSQL_DATABASE: ShopOnline
    ports:
      - 3308:3306
    volumes:
      - ./sql/shoponline.sql:/docker-entrypoint-initdb.d/init-script.sql
    networks:
      - shoponline-network

  phpmyadmin-container:
    container_name: phpmyadmin-container
    image: phpmyadmin/phpmyadmin
    restart: always
    depends_on:
      - mysql-container
    ports:
      - "8100:80"
    environment:
      PMA_HOST: mysql-container
    networks:
      - shoponline-network

  redis-container:
    image: docker.io/redis:7.2.3
    container_name: redis-container
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - shoponline-network

  shop-online-spring:
    container_name: shop-online-spring
    build:
      context: ./shop-online-be
      dockerfile: DockerfileSpringBoot
    image: shop-online-spring:1.0.0
    hostname: api_service
    ports:
      - 8099:8088
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/ShopOnline?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      MYSQL_ROOT_PASSWORD: Abc123456789@
      REDIS_HOST: redis-container
      REDIS_PORT: 6379
    #depends_on only waits for the container to start, not for the service inside the container to be fully operational
    depends_on:
      - mysql-container
    networks:
      - shoponline-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:8088/api/v1/actuator/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s #20s after container created, health check

networks:
  shoponline-network:
    driver: bridge
#docker-compose -f ./deployment.yaml rm -s -f mysql-container
#docker-compose -f ./deployment.yaml up -d mysql-container

#docker-compose -f ./deployment.yaml rm -s -f phpmyadmin-container
#docker-compose -f ./deployment.yaml up -d phpmyadmin-container

#docker-compose -f ./deployment.yaml rm -s -f shop-online-spring 
#docker-compose -f ./deployment.yaml up -d shop-online-spring --build

#docker-compose -f ./deployment.yaml rm -s -f redis-container
#docker-compose -f ./deployment.yaml up -d redis-container
